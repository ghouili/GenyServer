const mongoose = require("mongoose");

const GrossesseSchema = new mongoose.Schema({
    patient: { type: mongoose.Schema.Types.ObjectId, ref: 'Patient', required: true },
    encours: { type: Boolean, default: true },
    nom_conjoint: { type: String, maxlength: 256, default: null },
    prenom_conjoint: { type: String, maxlength: 256, default: null },
    date_naissance_conjoint: { type: Date },
    telephone_conjoint: { type: String, maxlength: 20 },
    groupe_sanguin_conjoint: { type: String, enum: ['A-', 'A+', 'B-', 'B+', 'AB-', 'AB+', 'O-', 'O+'], default: null },
    consanguinite_conjoint: { type: String, enum: ['', 'oui', 'non'], default: '', maxlength: 256 },
    etat_sante_conjoint: { type: String },
    poids_avant_grossesse: { type: Number },
    taille: { type: Number },
    ddr: { type: Date },
    ddr_corrige: { type: Date },
    ddg_corrige: { type: Date },
    cycle: { type: Number, default: 28 },
    nb_foetus: { type: String, enum: ['', 'unique', 'gemellaire', 'triple'], default: 'unique', maxlength: 256 },
    type_grossesse: { type: String, enum: ['', 'bichoriale_biamniotique', 'monochoriale_biamniotique', 'monochoriale_monoamniotique'], default: '', maxlength: 256 },
    type_grossesse_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    conception: { type: String, enum: ['', 'spontannee', 'iac', 'fiv'], default: '', maxlength: 256 },
    conception_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    date_echo: { type: Date },
    lcc_1: { type: Number },
    lcc_2: { type: Number },
    lcc_3: { type: Number },
    cn_1: { type: Number },
    cn_2: { type: Number },
    cn_3: { type: Number },
    score_herman_1: { type: String, enum: ['', 'cn_non_connue', 'cn_non_mesuree', 'cn_non_significative', 'score_9', 'score_4'], default: '', maxlength: 256 },
    score_herman_1_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    score_herman_2: { type: String, enum: ['', 'cn_non_connue', 'cn_non_mesuree', 'cn_non_significative', 'score_9', 'score_4'], default: '', maxlength: 256 },
    score_herman_2_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    score_herman_3: { type: String, enum: ['', 'cn_non_connue', 'cn_non_mesuree', 'cn_non_significative', 'score_9', 'score_4'], default: '', maxlength: 256 },
    score_herman_3_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    test_t21_fait: { type: Boolean, default: false },
    risque: { type: Number },
    risque_t21_age: { type: Number },
    risque_t21_bio: { type: Number },
    risque_t18_13: { type: Number },
    msres_1_type: { type: String, default: '', maxlength: 256 },
    msres_1_type_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    msres_1_val: { type: Number },
    msres_1_mom: { type: Number },
    msres_2_type: { type: String, default: '', maxlength: 256 },
    msres_2_type_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    msres_2_val: { type: Number },
    msres_2_mom: { type: Number },
    screening_premier_trimestre: { type: String, maxlength: 128 },
    screening_deuxieme_trimestre: { type: String, maxlength: 128 },
    caryotype_type: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    caryotype_val: { type: String, maxlength: 128 },
    dpni: { type: Number },
    dpni_comment: { type: String, maxlength: 256 },
    diabete: { type: String, enum: ['', 'diabete_gest_regime', 'diabete_gest_insul', 'hgpo', 'diabete_1', 'diabete_2'], default: '', maxlength: 256 },
    diabete_v2: { type: mongoose.Schema.Types.ObjectId, ref: 'ListeChoix' },
    tabac: { type: Boolean },
    listeria: { type: Boolean },
    toxoplasmose: { type: Boolean },
    toxoplasmose_v2: { type: String, enum: ['', '0', '1'], default: '', maxlength: 256 },
    cmv: { type: Boolean },
    alcool: { type: Boolean },
    epp: { type: Boolean },
    ppo: { type: Boolean },
    adp: { type: Boolean },
    allaitement_maternel: { type: Boolean },
    allaitement_artificiel: { type: Boolean },
    aspegic: { type: Boolean },
    infos_complemenatires: { type: String },
    lieu_accouchement_principal: { type: String, enum: ['H', 'C', 'A'], maxlength: 1 },
    lieu_accouchement: { type: mongoose.Schema.Types.ObjectId, ref: 'Etablissement' },
    lieu_accouchement_libre: { type: String, maxlength: 512 },
    notes: { type: String }
}, { timestamps: true });

module.exports = mongoose.model('Grossesse', GrossesseSchema);
